// <auto-generated />
using System;
using BackAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackAPI.Models.Appartenir", b =>
                {
                    b.Property<int>("Id_apart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_apart");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_apart"));

                    b.Property<int>("AvionID")
                        .HasColumnType("integer")
                        .HasColumnName("id_aeronef");

                    b.Property<int>("Capacite")
                        .HasColumnType("integer")
                        .HasColumnName("capacite");

                    b.Property<int>("ClasseServiceID")
                        .HasColumnType("integer")
                        .HasColumnName("id_classe");

                    b.HasKey("Id_apart");

                    b.HasIndex("AvionID");

                    b.HasIndex("ClasseServiceID");

                    b.ToTable("appartenir");
                });

            modelBuilder.Entity("BackAPI.Models.Avion", b =>
                {
                    b.Property<int>("Id_aeronef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_aeronef");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_aeronef"));

                    b.Property<string>("Type_aeronef")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("type_aeronef");

                    b.HasKey("Id_aeronef");

                    b.ToTable("avion");
                });

            modelBuilder.Entity("BackAPI.Models.ClasseService", b =>
                {
                    b.Property<int>("Id_classe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_classe");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_classe"));

                    b.Property<int>("AvionID")
                        .HasColumnType("integer")
                        .HasColumnName("id_aeronef");

                    b.Property<int>("Num_siege")
                        .HasColumnType("integer")
                        .HasColumnName("num_siege");

                    b.Property<string>("Type_classe")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("type_classe");

                    b.HasKey("Id_classe");

                    b.HasIndex("AvionID");

                    b.ToTable("classeservice");
                });

            modelBuilder.Entity("BackAPI.Models.Itineraire", b =>
                {
                    b.Property<int>("Id_itineraire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_itineraire");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_itineraire"));

                    b.Property<string>("Aeroport_arrive")
                        .HasColumnType("text")
                        .HasColumnName("aeroport_arrive");

                    b.Property<string>("Aeroport_depart")
                        .HasColumnType("text")
                        .HasColumnName("aeroport_depart");

                    b.HasKey("Id_itineraire");

                    b.ToTable("itineraire");
                });

            modelBuilder.Entity("BackAPI.Models.Passager", b =>
                {
                    b.Property<int>("Id_passager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_passager");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_passager"));

                    b.Property<string>("Adresse_passager")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("adresse_passager");

                    b.Property<string>("Email_passager")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_passager");

                    b.Property<string>("Nom_passager")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nom_passager");

                    b.Property<string>("Num_passeport")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("num_passeport");

                    b.Property<string>("Phone_passager")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phone_passager");

                    b.Property<string>("Prenom_passager")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prenom_passager");

                    b.HasKey("Id_passager");

                    b.ToTable("passager");
                });

            modelBuilder.Entity("BackAPI.Models.Reservation", b =>
                {
                    b.Property<int>("Num_reservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("num_reservation");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Num_reservation"));

                    b.Property<int>("ClasseServiceID")
                        .HasColumnType("integer")
                        .HasColumnName("id_classe");

                    b.Property<DateOnly>("Date_reservation")
                        .HasColumnType("date")
                        .HasColumnName("date_reservation");

                    b.Property<int>("PassagerID")
                        .HasColumnType("integer")
                        .HasColumnName("id_passager");

                    b.Property<double>("Prix")
                        .HasColumnType("double precision")
                        .HasColumnName("prix");

                    b.Property<double>("Remboursement")
                        .HasColumnType("double precision")
                        .HasColumnName("remboursement");

                    b.Property<int>("VolID")
                        .HasColumnType("integer")
                        .HasColumnName("id_vol");

                    b.HasKey("Num_reservation");

                    b.HasIndex("ClasseServiceID");

                    b.HasIndex("PassagerID");

                    b.HasIndex("VolID");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("BackAPI.Models.Tarif", b =>
                {
                    b.Property<int>("Id_tarif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_tarif");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_tarif"));

                    b.Property<int>("ClasseServiceID")
                        .HasColumnType("integer")
                        .HasColumnName("id_classe");

                    b.Property<double>("Montant_tarif")
                        .HasColumnType("double precision")
                        .HasColumnName("montant_tarif");

                    b.Property<int>("VolID")
                        .HasColumnType("integer")
                        .HasColumnName("id_vol");

                    b.HasKey("Id_tarif");

                    b.HasIndex("ClasseServiceID");

                    b.HasIndex("VolID");

                    b.ToTable("tarif");
                });

            modelBuilder.Entity("BackAPI.Models.Utulisateur", b =>
                {
                    b.Property<int>("Num_matricule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("num_matricule");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Num_matricule"));

                    b.Property<string>("Adresse_user")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("adresse_user");

                    b.Property<string>("Email_user")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("email_user");

                    b.Property<string>("Mdp_user")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mdp_user");

                    b.Property<string>("Nom_user")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nom_user");

                    b.Property<long>("Phone_user")
                        .HasColumnType("bigint")
                        .HasColumnName("phone_user");

                    b.Property<string>("Prenom_user")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prenom_user");

                    b.Property<string>("Role_user")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("role_user");

                    b.HasKey("Num_matricule");

                    b.ToTable("utilisateur");
                });

            modelBuilder.Entity("BackAPI.Models.Vol", b =>
                {
                    b.Property<int>("Id_vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_vol");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_vol"));

                    b.Property<int>("AvionID")
                        .HasColumnType("integer")
                        .HasColumnName("id_aeronef");

                    b.Property<DateOnly>("Date_depart")
                        .HasColumnType("date")
                        .HasColumnName("date_depart");

                    b.Property<TimeOnly>("Heure_depart")
                        .HasColumnType("time without time zone")
                        .HasColumnName("heure_depart");

                    b.Property<int>("ItineraireID")
                        .HasColumnType("integer")
                        .HasColumnName("id_itineraire");

                    b.Property<string>("Num_vol")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("num_vol");

                    b.Property<string>("Statut")
                        .HasColumnType("text")
                        .HasColumnName("statut");

                    b.HasKey("Id_vol");

                    b.HasIndex("AvionID");

                    b.HasIndex("ItineraireID");

                    b.ToTable("vol");
                });

            modelBuilder.Entity("BackAPI.Models.Appartenir", b =>
                {
                    b.HasOne("BackAPI.Models.Avion", "Avion")
                        .WithMany()
                        .HasForeignKey("AvionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackAPI.Models.ClasseService", "ClasseService")
                        .WithMany()
                        .HasForeignKey("ClasseServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avion");

                    b.Navigation("ClasseService");
                });

            modelBuilder.Entity("BackAPI.Models.ClasseService", b =>
                {
                    b.HasOne("BackAPI.Models.Avion", "Avion")
                        .WithMany("ClasseServices")
                        .HasForeignKey("AvionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avion");
                });

            modelBuilder.Entity("BackAPI.Models.Reservation", b =>
                {
                    b.HasOne("BackAPI.Models.ClasseService", "ClasseService")
                        .WithMany("Reservations")
                        .HasForeignKey("ClasseServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackAPI.Models.Passager", "Passager")
                        .WithMany("Reservations")
                        .HasForeignKey("PassagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackAPI.Models.Vol", "Vol")
                        .WithMany("Reservations")
                        .HasForeignKey("VolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClasseService");

                    b.Navigation("Passager");

                    b.Navigation("Vol");
                });

            modelBuilder.Entity("BackAPI.Models.Tarif", b =>
                {
                    b.HasOne("BackAPI.Models.ClasseService", "ClasseService")
                        .WithMany("Tarifs")
                        .HasForeignKey("ClasseServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackAPI.Models.Vol", "Vol")
                        .WithMany("Tarifs")
                        .HasForeignKey("VolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClasseService");

                    b.Navigation("Vol");
                });

            modelBuilder.Entity("BackAPI.Models.Vol", b =>
                {
                    b.HasOne("BackAPI.Models.Avion", "Avion")
                        .WithMany("Vols")
                        .HasForeignKey("AvionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackAPI.Models.Itineraire", "Itineraire")
                        .WithMany("Vols")
                        .HasForeignKey("ItineraireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avion");

                    b.Navigation("Itineraire");
                });

            modelBuilder.Entity("BackAPI.Models.Avion", b =>
                {
                    b.Navigation("ClasseServices");

                    b.Navigation("Vols");
                });

            modelBuilder.Entity("BackAPI.Models.ClasseService", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Tarifs");
                });

            modelBuilder.Entity("BackAPI.Models.Itineraire", b =>
                {
                    b.Navigation("Vols");
                });

            modelBuilder.Entity("BackAPI.Models.Passager", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BackAPI.Models.Vol", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Tarifs");
                });
#pragma warning restore 612, 618
        }
    }
}
